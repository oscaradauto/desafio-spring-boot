/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.api.gestion.tareas.controller;

import com.api.gestion.tareas.dto.TareaDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-06-12T11:17:41.456015100-05:00[America/Bogota]", comments = "Generator version: 7.6.0")
@Validated
@Tag(name = "Tareas", description = "the Tareas API")
public interface TareasApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /tareas : Crear nueva tarea
     *
     * @param tareaDto  (required)
     * @return Tarea creada exitosamente (status code 201)
     */
    @Operation(
        operationId = "createTarea",
        summary = "Crear nueva tarea",
        tags = { "Tareas" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Tarea creada exitosamente", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TareaDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/tareas",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<TareaDto> createTarea(
        @Parameter(name = "TareaDto", description = "", required = true) @Valid @RequestBody TareaDto tareaDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"descripcion\" : \"descripcion\", \"estado\" : \"estado\", \"fechaVencimiento\" : \"2000-01-23\", \"titulo\" : \"titulo\", \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /tareas/{id} : Eliminar tarea por ID
     *
     * @param id  (required)
     * @return Tarea eliminada satisfactoriamente (status code 200)
     */
    @Operation(
        operationId = "deleteTarea",
        summary = "Eliminar tarea por ID",
        tags = { "Tareas" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Tarea eliminada satisfactoriamente", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/tareas/{id}",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<String> deleteTarea(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /tareas/{id} : Obtener tarea por ID
     *
     * @param id  (required)
     * @return Tarea encontrada (status code 200)
     *         or Tarea no encontrada (status code 404)
     */
    @Operation(
        operationId = "getTareaById",
        summary = "Obtener tarea por ID",
        tags = { "Tareas" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Tarea encontrada", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TareaDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Tarea no encontrada")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/tareas/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<TareaDto> getTareaById(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"descripcion\" : \"descripcion\", \"estado\" : \"estado\", \"fechaVencimiento\" : \"2000-01-23\", \"titulo\" : \"titulo\", \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /tareas : Obtener todas las tareas
     *
     * @return Lista de tareas (status code 200)
     */
    @Operation(
        operationId = "getTareas",
        summary = "Obtener todas las tareas",
        tags = { "Tareas" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista de tareas", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TareaDto.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/tareas",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<TareaDto>> getTareas(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"descripcion\" : \"descripcion\", \"estado\" : \"estado\", \"fechaVencimiento\" : \"2000-01-23\", \"titulo\" : \"titulo\", \"id\" : 0 }, { \"descripcion\" : \"descripcion\", \"estado\" : \"estado\", \"fechaVencimiento\" : \"2000-01-23\", \"titulo\" : \"titulo\", \"id\" : 0 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /tareas/{id} : Actualizar tarea por ID
     *
     * @param id  (required)
     * @param tareaDto  (required)
     * @return Tarea actualizada exitosamente (status code 200)
     */
    @Operation(
        operationId = "updateTarea",
        summary = "Actualizar tarea por ID",
        tags = { "Tareas" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Tarea actualizada exitosamente", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TareaDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/tareas/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<TareaDto> updateTarea(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "TareaDto", description = "", required = true) @Valid @RequestBody TareaDto tareaDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"descripcion\" : \"descripcion\", \"estado\" : \"estado\", \"fechaVencimiento\" : \"2000-01-23\", \"titulo\" : \"titulo\", \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
